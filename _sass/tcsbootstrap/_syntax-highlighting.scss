// outline light-mode and dark-mode values for the colors that change

$code-colors: (
    'default': (
        'light-mode': $base03,
        'dark-mode':  $base3
    ),
    'background': (
        'light-mode': $base3,
        'dark-mode':  $base03
    ),
    'comment': (
        'light-mode': $base1,
        'dark-mode':  $base01
    ),
    'error': (
        'light-mode': $base1,
        'dark-mode':  $base01
    ),
    'generic': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'keyword': (
        'light-mode': $green,
        'dark-mode':  $green
    ),
    'literal': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'name': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'operator': (
        'light-mode': $green,
        'dark-mode':  $green
    ),
    'other': (
        'light-mode': $orange,
        'dark-mode':  $orange
    ),
    'punctuation': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'commentmultiline': (
        'light-mode': $base1,
        'dark-mode':  $base01
    ),
    'commentpreproc': (
        'light-mode': $green,
        'dark-mode':  $green
    ),
    'commentsingle': (
        'light-mode': $base1,
        'dark-mode':  $base01
    ),
    'commentspecial': (
        'light-mode': $green,
        'dark-mode':  $green
    ),
    'genericdeleted': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'genericemph': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'genericerror': (
        'light-mode': $red,
        'dark-mode':  $red
    ),
    'genericheading': (
        'light-mode': $orange,
        'dark-mode':  $orange
    ),
    'genericinserted': (
        'light-mode': $green,
        'dark-mode':  $green
    ),
    'genericoutput': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'genericprompt': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'genericstrong': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'genericsubheading': (
        'light-mode': $orange,
        'dark-mode':  $orange
    ),
    'generictraceback': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'keywordconstant': (
        'light-mode': $orange,
        'dark-mode':  $orange
    ),
    'keyworddeclaration': (
        'light-mode': $blue,
        'dark-mode':  $blue
    ),
    'keywordnamespace': (
        'light-mode': $green,
        'dark-mode':  $green
    ),
    'keywordpseudo': (
        'light-mode': $green,
        'dark-mode':  $green
    ),
    'keywordreserved': (
        'light-mode': $blue,
        'dark-mode':  $blue
    ),
    'keywordtype': (
        'light-mode': $red,
        'dark-mode':  $red
    ),
    'literaldate': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'literalnumber': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'literalstring': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'nameattribute': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'namebuiltin': (
        'light-mode': $yellow,
        'dark-mode':  $yellow
    ),
    'nameclass': (
        'light-mode': $blue,
        'dark-mode':  $blue
    ),
    'nameconstant': (
        'light-mode': $orange,
        'dark-mode':  $orange
    ),
    'namedecorator': (
        'light-mode': $blue,
        'dark-mode':  $blue
    ),
    'nameentity': (
        'light-mode': $orange,
        'dark-mode':  $orange
    ),
    'nameexception': (
        'light-mode': $orange,
        'dark-mode':  $orange
    ),
    'namefunction': (
        'light-mode': $blue,
        'dark-mode':  $blue
    ),
    'namelabel': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'namenamespace': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'nameother': (
        'light-mode': $base0,
        'dark-mode':  $base00
    ),
    'nameproperty': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'nametag': (
        'light-mode': $blue,
        'dark-mode':  $blue
    ),
    'namevariable': (
        'light-mode': $blue,
        'dark-mode':  $blue
    ),
    'operatorword': (
        'light-mode': $green,
        'dark-mode':  $green
    ),
    'textwhitespace': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'literalnumberfloat': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'literalnumberhex': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'literalnumberinteger': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'literalnumberoct': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'literalstringbacktick': (
        'light-mode': $base1,
        'dark-mode':  $base01
    ),
    'literalstringchar': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'literalstringdoc': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'literalstringdouble': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'literalstringescape': (
        'light-mode': $orange,
        'dark-mode':  $orange
    ),
    'literalstringheredoc': (
        'light-mode': $base01,
        'dark-mode':  $base1
    ),
    'literalstringinterpol': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'literalstringother': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'literalstringregex': (
        'light-mode': $red,
        'dark-mode':  $red
    ),
    'literalstringsingle': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'literalstringsymbol': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    ),
    'namebuiltinpseudo': (
        'light-mode': $blue,
        'dark-mode':  $blue
    ),
    'namevariableclass': (
        'light-mode': $blue,
        'dark-mode':  $blue
    ),
    'namevariableglobal': (
        'light-mode': $blue,
        'dark-mode':  $blue
    ),
    'namevariableinstance': (
        'light-mode': $blue,
        'dark-mode':  $blue
    ),
    'literalintegernumberlong': (
        'light-mode': $cyan,
        'dark-mode':  $cyan
    )
);

// @function code-color($palette, $mode: 'light-mode') {
//    @return map-get(map-get($code-colors, $palette), $mode);
// }

// @import "variables";

@function code-color($palette, $mode) {
    @if map-has-key($code-colors, $palette) {
        @if map-has-key(map-get($code-colors, $palette), $mode) {
            @return map-get(map-get($code-colors, $palette), $mode);
        } @else {
            @return $text-color;
        }
    } @else {
        @return $text-color;
    }
}

// usage example:
// code-color('name', 'light-mode')

$syntax-map: (
  light-mode: 'dark-mode',
  dark-mode: 'light-mode'
);

@each $mode-name, $mode-string in $syntax-map {

  html.tcs-#{$mode-name} {

    pre {
      background: code-color('background', $mode-string);
      color: code-color('generic', $mode-string);
    }

    .highlight {
        background: code-color('background', $mode-string);
        @extend %vertical-rhythm !optional;

        .highlighter-rouge & {
            background: code-color('background', $mode-string);
        }

        .c        { color: code-color('comment', $mode-string);
                  font-style: italic; }
        .err      { color: code-color('error', $mode-string); }
        .k        { color: code-color('keyword', $mode-string); }
        .o        { color: code-color('operator', $mode-string); }
        .cm       { color: code-color('commentmultiline', $mode-string); }
        .cp       { color: code-color('commentpreproc', $mode-string); }
        .c1       { color: code-color('commentsingle', $mode-string); }
        .cs       { color: code-color('commentspecial', $mode-string);
                    font-weight: bold; font-style: italic; }
        .gd       { color: code-color('genericdeleted', $mode-string); }
        .gd .x    { color: code-color('genericdeleted', $mode-string); }
        .ge       { color: code-color('genericemph', $mode-string);
                    font-style: italic; }
        .gr       { color: code-color('genericerror', $mode-string); }
        .gh       { color: code-color('genericheading', $mode-string); }
        .gi       { color: code-color('genericinserted', $mode-string); }
        .gi .x    { color: code-color('genericinserted', $mode-string); }
        .go       { color: code-color('genericoutput', $mode-string); }
        .gp       { color: code-color('genericprompt', $mode-string); }
        .gs       { color: code-color('genericstrong', $mode-string);
                    font-weight: bold; }
        .gu       { color: code-color('genericsubheading', $mode-string); }
        .gt       { color: code-color('generictraceback', $mode-string); }
        .kc       { color: code-color('keywordconstant', $mode-string);
                    font-weight: bold; }
        .kd       { color: code-color('keyworddeclaration', $mode-string);
                    font-weight: bold; }
        .kp       { color: code-color('keywordpseudo', $mode-string);
                    font-weight: bold; }
        .kr       { color: code-color('keywordreserved', $mode-string);
                    font-weight: bold; }
        .kt       { color: code-color('keywordtype', $mode-string);
                    font-weight: bold; }
        .m        { color: code-color('literalnumber', $mode-string); }
        .s        { color: code-color('literalstring', $mode-string); }
        .na       { color: code-color('nameattribute', $mode-string); }
        .nb       { color: code-color('namebuiltin', $mode-string); }
        .nc       { color: code-color('nameclass', $mode-string);
                    font-weight: bold; }
        .no       { color: code-color('nameconstant', $mode-string); }
        .ni       { color: code-color('nameentity', $mode-string); }
        .ne       { color: code-color('nameexception', $mode-string);
                    font-weight: bold; }
        .nf       { color: code-color('namefunction', $mode-string);
                    font-weight: bold; }
        .nn       { color: code-color('namenamespace', $mode-string); }
        .nt       { color: code-color('nametag', $mode-string); }
        .nv       { color: code-color('namevariable', $mode-string); }
        .ow       { color: code-color('operatorword', $mode-string); }
        .w        { color: code-color('textwhitespace', $mode-string); }
        .mf       { color: code-color('literalnumberfloat', $mode-string); }
        .mh       { color: code-color('literalnumberhex', $mode-string); }
        .mi       { color: code-color('literalnumberinteger', $mode-string); }
        .mo       { color: code-color('literalnumberoct', $mode-string); }
        .sb       { color: code-color('literalstringbacktick', $mode-string); }
        .sc       { color: code-color('literalstringchar', $mode-string); }
        .sd       { color: code-color('literalstringdoc', $mode-string); }
        .s2       { color: code-color('literalstringdouble', $mode-string); }
        .se       { color: code-color('literalstringescape', $mode-string); }
        .sh       { color: code-color('literalstringheredoc', $mode-string); }
        .si       { color: code-color('literalstringinterpol', $mode-string); }
        .sx       { color: code-color('literalstringother', $mode-string); }
        .sr       { color: code-color('literalstringregex', $mode-string); }
        .s1       { color: code-color('literalstringsingle', $mode-string); }
        .ss       { color: code-color('literalstringsymbol', $mode-string); }
        .bp       { color: code-color('namebuiltinpseudo', $mode-string); }
        .vc       { color: code-color('namevariableclass', $mode-string); }
        .vg       { color: code-color('namevariableglobal', $mode-string); }
        .vi       { color: code-color('namevariableinstance', $mode-string); }
        .il       { color: code-color('literalnumberintegerlong', $mode-string); }

    }
  }
}

